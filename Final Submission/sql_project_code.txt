########################################################
# Create Tables
########################################################
-- Create table 1: Location
CREATE TABLE IF NOT EXISTS Location (
Beat TEXT PRIMARY KEY NOT NULL UNIQUE,
District TEXT NOT NULL);

-- Create Table 2: crimetype
CREATE TABLE IF NOT EXISTS CrimeType (
IUCR TEXT PRIMARY KEY NOT NULL UNIQUE,
PrimaryCategory TEXT,
SecondaryCategory TEXT);

-- create Table 3: CASE
CREATE TABLE IF NOT EXISTS CriminalCase (
CrimeID INT PRIMARY KEY NOT NULL UNIQUE,
-- we use 2022 because that is the upper limit excluding 
Date_Time TEXT NOT NULL CHECK (Date_Time BETWEEN 2017 AND 2022),
Arrest TEXT, 
Beat TEXT NOT NULL,
IUCR TEXT NOT NULL, 
FOREIGN KEY (Beat) REFERENCES Location (Beat),
FOREIGN KEY (IUCR) REFERENCES CrimeType (IUCR)
		ON UPDATE CASCADE
		ON DELETE CASCADE
);


########################################################
# Create Triggers
########################################################
 
-- create the master table 
CREATE TABLE IF NOT EXISTS MasterTableLog (
"ID" INTEGER PRIMARY KEY,
"DateTime" TEXT,
"TransactionRep" TEXT
);

-- Craete a trigger logging deletes
CREATE TRIGGER IF NOT EXISTS DeleteFromCriminalCaseTrigger
BEFORE DELETE ON CriminalCase
BEGIN 
INSERT INTO  MasterTableLog VALUES(old.CrimeID, datetime(), 'Delete');
END;

-- create a trigger loggin the information when data is put into the tables
CREATE TRIGGER IF NOT EXISTS InsertIntoCriminalCaseTrigger
BEFORE INSERT ON CriminalCase
BEGIN 
INSERT INTO  MasterTableLog VALUES(new.CrimeID, datetime(), 'Insert');
END;

########################################################
# Load Data
########################################################

-- Data insertion into location
INSERT INTO Location (Beat, District) SELECT DISTINCT 
beat, district FROM data_crime_transformed;

-- Data insertion into CrimeType
INSERT INTO CrimeType (IUCR, PrimaryCategory, SecondaryCategory) SELECT DISTINCT 
iucr, primarytype, description FROM data_crime_transformed;

-- Data Insertion into Criminal Case 
INSERT INTO CriminalCase (CrimeID, Date_Time, Arrest, Beat, IUCR) 
SELECT DISTINCT CrimeID, "date", arrest, beat, iucr 
FROM data_crime_transformed;

-- just a quick test
SELECT *
FROM MasterTableLog
Limit 5;

########################################################
# Create Views
########################################################

 /* New Query */
-- The time view
CREATE VIEW view_convenient_time AS
-- cast the "datetime" objects (which are in TEXT) into buckets
SELECT CrimeID, IUCR, year AS Year, month AS Month, day AS Day, hour as Hour,
CASE WHEN CAST(hour AS INT) >= 6 and CAST(hour AS INT) <= 11  then 'Morning'
			WHEN CAST(hour AS INT) >= 12 and CAST(hour AS INT) <= 17  then 'Noon'
			WHEN CAST(hour AS INT) >= 18 and CAST(hour AS INT) <= 23  then 'Evening'
			WHEN CAST(hour AS INT) >= 0 and CAST(hour AS INT) <= 5  then 'Night'
		   end TimeofDay
FROM
-- This subquery is technically superflous; however, it eases the "bucketing" above considerably as I only have to call "hour" instead of: strftime... each time
(SELECT CrimeID, IUCR, STRFTIME("%d", Date_Time) AS day, STRFTIME("%m", Date_Time) AS month, STRFTIME("%Y", Date_Time) AS year, STRFTIME("%H", Date_Time) AS hour
FROM CriminalCase);


/* New Query */
-- The resource intensive crime; this is an experiment
CREATE VIEW view_resource_crimes AS
-- calculate the overall proportion of arrest per crime category 
SELECT PrimaryCat_tot.PrimaryCategory, ArrestCount, TotalCommitted, ROUND(CAST(CAST(ArrestCount AS REAL) / CAST(TotalCommitted AS REAL) AS REAL) * 100, 2) AS ProportionArrested
-- in this part below (subquery) we count the crimes committed by primary category
FROM (SELECT PrimaryCategory, COUNT(*) AS TotalCommitted
FROM CriminalCase AS CC JOIN CrimeType AS CT ON CC.IUCR == CT.IUCR
GROUP BY PrimaryCategory) AS PrimaryCat_tot
-- merging both subquery (this is an experiment)
JOIN 
-- obtain the ARREST count per crime 
(SELECT PrimaryCategory, COUNT(*) AS ArrestCount
FROM CriminalCase AS CC JOIN CrimeType AS CT ON CC.IUCR == CT.IUCR
WHERE CC.Arrest == 'True'
GROUP BY PrimaryCategory) AS PrimaryCat_arr ON PrimaryCat_tot.PrimaryCategory == PrimaryCat_arr.PrimaryCategory 
ORDER BY ProportionArrested DESC;

########################################################
# Index Creation
########################################################

-- create an index on district 11
CREATE INDEX IF NOT EXISTS  "idx_district_11" ON "location" ( "beat","district" ) WHERE district == '11';

-- create an index on district 
CREATE INDEX IF NOT EXISTS  "idx_district" ON "location" ("beat", "district" );
 
-- create an index on the categories we wanted to further analyse in Q3 and Q2
CREATE INDEX IF NOT EXISTS  "idx_primtype" 
ON "CrimeType" ("IUCR", "PrimaryCategory", "SecondaryCategory" ) 
WHERE PrimaryCategory IN ('HOMICIDE', 'PROSTITUTION', 'WEAPONS VIOLATION', 'NARCOTICS');
 
 
 
-- quick test (this is q3)
 EXPLAIN QUERY PLAN  SELECT l.district, ct.PrimaryCategory, vct.TimeofDay, COUNT(*) AS "Crimes Per TimeofDay", 
	ROUND(CAST(COUNT(*) AS REAL) / SUM(COUNT(*)) OVER(PARTITION BY ct.PrimaryCategory) * 100, 4) AS Proportion
FROM
view_convenient_time as vct 
	JOIN CrimeType as ct ON vct.IUCR == ct.IUCR 
		JOIN CriminalCase as cc ON cc.CrimeID == vct.CrimeID 
			JOIN Location as l ON l.beat == cc.beat
WHERE ct.PrimaryCategory in ('HOMICIDE', 'PROSTITUTION', 'WEAPONS VIOLATION', 'NARCOTICS') 
	AND l.district == '11'
GROUP BY ct.PrimaryCategory, vct.TimeofDay;




########################################################
# Question 1 part 1
########################################################
-- q1 part 1 

/* New Query */
-- simple way to get total per year from same query; total change as a window function
SELECT Year, CrimesCommitted , 
	ROUND(((CrimesCommitted - LAG(CrimesCommitted) OVER (ORDER BY Year))/ CAST(LAG(CrimesCommitted) OVER (ORDER BY Year) AS REAL)), 4) * 100 AS PctChangetoPrevYear
FROM   
-- again a conveniently placed subquery for using a window function (see q3 for a better version)
(SELECT Year, Month, COUNT(* ) AS CrimesCommitted FROM  view_convenient_time
GROUP BY Year);


/* New Query */
-- calculate total change over those 5 years 
SELECT Year, CrimesCommitted , 
	ROUND(((CrimesCommitted - LAG(CrimesCommitted) OVER (ORDER BY Year))/ CAST(LAG(CrimesCommitted) OVER (ORDER BY Year) AS REAL)), 4) * 100 AS PctChangetoPrevYear
FROM   
-- again a conveniently placed subquery for using a window function (see q3 for a better version) subsected on 2017 and 2021
(SELECT Year, Month, COUNT(* ) AS CrimesCommitted FROM  view_convenient_time
GROUP BY Year)
WHERE Year IN('2017', '2021');


/* New Query */
-- alternative with sum
SELECT Year, SUM(CrimeCountCurrentYear), ROUND((SUM(CrimeCountCurrentYear) - CAST(LAG(SUM(CrimeCountCurrentYear)) OVER (ORDER BY Year) AS REAL)) / CAST(LAG(SUM(CrimeCountCurrentYear)) OVER (ORDER BY Year) AS REAL), 4) * 100 AS PCTChange
 FROM
 -- convenient subquery subsecting the data for the window function to be used 
(SELECT DISTINCT vct.Year, ct.PrimaryCategory, COUNT (*) OVER( PARTITION BY ct.PrimaryCategory, Year ORDER BY ct.PrimaryCategory) AS CrimeCountCurrentYear 
FROM view_resource_crimes vrc JOIN CrimeType AS ct ON vrc.PrimaryCategory == ct.PrimaryCategory JOIN view_convenient_time as vct ON vct.IUCR == ct.IUCR 
WHERE vrc.ProportionArrested > 50 AND vrc.TotalCommitted >= 500)
WHERE Year == '2017' OR Year == '2021'
GROUP BY Year;



########################################################
# Question 1 part 2
########################################################

-- q1 part 2

/* New Query */
SELECT Year, PrimaryCategory, CrimeCountCurrentYear, ROUND(CAST((CrimeCountCurrentYear - LAG(CrimeCountCurrentYear) OVER (PARTITION BY PrimaryCategory)) AS REAL) / CAST(LAG(CrimeCountCurrentYear) OVER (PARTITION BY PrimaryCategory) AS REAL) * 100, 4) AS PCTChange
FROM
-- again the convenient subquery for the qwindow function (see q3 for a concise version)
(SELECT DISTINCT vct.Year, ct.PrimaryCategory, COUNT (*) OVER( PARTITION BY ct.PrimaryCategory, Year ORDER BY ct.PrimaryCategory) AS CrimeCountCurrentYear 
FROM view_resource_crimes vrc JOIN CrimeType AS ct ON vrc.PrimaryCategory == ct.PrimaryCategory JOIN view_convenient_time as vct ON vct.IUCR == ct.IUCR 
WHERE vrc.ProportionArrested > 50 AND vrc.TotalCommitted >= 500);

########################################################
# Question 1 part 3
########################################################



-- q1 part 3
/* New Query*/
-- biggest 5 INCREAASES 
SELECT  DISTINCT PrimaryCategory,PCTChange, Dense_RANK () OVER(ORDER BY PCTChange DESC) AS CrimeWithLargestReduction
FROM
-- prepare ranking above
(SELECT Year, PrimaryCategory, CrimeCountCurrentYear, ROUND(CAST((CrimeCountCurrentYear - LAG(CrimeCountCurrentYear) OVER (PARTITION BY PrimaryCategory)) AS REAL) / CAST(LAG(CrimeCountCurrentYear) OVER (PARTITION BY PrimaryCategory) AS REAL) * 100, 4)
 AS PCTChange
FROM
--  convenient subquery
(SELECT DISTINCT vct.Year, ct.PrimaryCategory, COUNT (*) OVER( PARTITION BY PrimaryCategory, Year ORDER BY PrimaryCategory) AS CrimeCountCurrentYear 
FROM view_convenient_time as vct JOIN CrimeType AS ct
ON vct.IUCR == ct.IUCR
WHERE Year == '2017' OR Year == '2021'))
WHERE PCTChange NOT NULL
LIMIT 5;


/* New Query*/
-- biggest 5 decrease 
SELECT  DISTINCT PrimaryCategory,PCTChange, Dense_RANK () OVER(ORDER BY PCTChange ASC) AS CrimeWithLargestReduction
FROM
-- prepare for ranking (see q3 for a very concise version
(SELECT Year, PrimaryCategory, CrimeCountCurrentYear, ROUND(CAST((CrimeCountCurrentYear - LAG(CrimeCountCurrentYear) OVER (PARTITION BY PrimaryCategory)) AS REAL) / CAST(LAG(CrimeCountCurrentYear) OVER (PARTITION BY PrimaryCategory) AS REAL) * 100, 4)
 AS PCTChange
FROM
-- again the convenient subquery
(SELECT DISTINCT vct.Year, ct.PrimaryCategory, COUNT (*) OVER( PARTITION BY PrimaryCategory, Year ORDER BY PrimaryCategory) AS CrimeCountCurrentYear 
FROM view_convenient_time as vct JOIN CrimeType AS ct
ON vct.IUCR == ct.IUCR
WHERE Year == '2017' OR Year == '2021'))
WHERE PCTChange NOT NULL
LIMIT 5;

/* New Query*/
-- analyse homicides
SELECT Year, SecondaryCategory, COUNT(*)
FROM CriminalCase cc JOIN CrimeType ct ON cc.IUCR == ct.IUCR JOIN view_convenient_time vct ON vct.CrimeID == cc.CrimeID
WHERE PrimaryCategory == 'HOMICIDE'
GROUP BY Year, SecondaryCategory
;


########################################################
# Question 2
########################################################
--question 2
/* New Query*/
-- Another select level becuase we want to limit to 3 outputs
SELECT * FROM (
SELECT PrimaryCategory, District, DENSE_RANK() OVER (PARTITION BY PrimaryCategory ORDER BY PctCrimeTypeByDistrict DESC ) AS RankByCrimeCommitted, DistrictTotalCrimesRecorded, PctCrimeTypeByDistrict
FROM 
-- get primary crime type count per district total
(SELECT c_by_district.District, c_by_district.PrimaryCategory , c_by_district.DistrictTotalCrimesRecorded, c_total.TotalCrimesRecorded, ROUND(CAST( CAST(c_by_district.DistrictTotalCrimesRecorded AS REAL) / CAST(c_total.TotalCrimesRecorded AS REAL) AS REAL), 4) * 100 AS PctCrimeTypeByDistrict
FROM (SELECT District, PrimaryCategory, COUNT(*) AS DistrictTotalCrimesRecorded
FROM CriminalCase AS CC INNER JOIN CrimeType as CT ON CC.IUCR = CT.IUCR INNER JOIN Location AS L ON L.Beat = CC.Beat
GROUP BY District, PrimaryCategory) AS c_by_district
-- Here I try something out: I wanted to see how merging works on two subqueries and then using them (as I said: I was experimenting)
LEFT JOIN 
-- get the crimes recorded in total per category
(SELECT PrimaryCategory, COUNT(*) AS TotalCrimesRecorded
FROM CriminalCase AS CC INNER JOIN CrimeType as CT ON CC.IUCR = CT.IUCR INNER JOIN Location AS L ON L.Beat = CC.Beat
GROUP BY PrimaryCategory) AS c_total ON c_by_district.PrimaryCategory == c_total.PrimaryCategory
WHERE c_total.PrimaryCategory IN ('HOMICIDE', 'PROSTITUTION', 'WEAPONS VIOLATION', 'NARCOTICS')) ) AS x
WHERE x.RankByCrimeCommitted <= 3
;

/* New Query*/
-- are beats a factor to be considered? use homicide again as in Q1 to exempliefy
SELECT l.Beat, Count(*) Crimecount
FROM CriminalCase AS CC INNER JOIN CrimeType as CT ON CC.IUCR = ct.IUCR INNER JOIN Location AS L ON L.Beat = CC.Beat
WHERE l.district == '11' AND CT.PrimaryCategory == 'HOMICIDE'
GROUP BY l.beat
;




########################################################
# Question 3
########################################################

-- Question 3
/* New Query*/
-- This query combines the knowledge from the other two questions in one neat query; this one query should satisfy most requirements of the assignment
SELECT l.district, ct.PrimaryCategory, vct.TimeofDay, COUNT(*) AS "Crimes Per TimeofDay", 
	ROUND(CAST(COUNT(*) AS REAL) / SUM(COUNT(*)) OVER(PARTITION BY ct.PrimaryCategory) * 100, 4) AS Proportion
FROM
-- join on 4 different tables/views
view_convenient_time as vct 
	JOIN CrimeType as ct ON vct.IUCR == ct.IUCR 
		JOIN CriminalCase as cc ON cc.CrimeID == vct.CrimeID 
			JOIN Location as l ON l.beat == cc.beat
-- subsect by category
WHERE ct.PrimaryCategory in ('HOMICIDE', 'PROSTITUTION', 'WEAPONS VIOLATION', 'NARCOTICS') 
	AND l.district == '11'
-- group by two columns
GROUP BY ct.PrimaryCategory, vct.TimeofDay
;











